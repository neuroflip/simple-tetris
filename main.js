(()=>{"use strict";const e=class{constructor(e){this.canvasContext=e,this.position={x:0,y:0},this.piece=[]}render(){for(let e=0;e<this.piece.length;e++)for(let t=0;t<this.piece[e].length;t++)if(1===this.piece[e][t]){const i=this.position.x,n=this.position.y;w.drawPexel(this.canvasContext,i+t*d,n+e*u,d)}}rotateRigth(){const e=[];for(let t=0;t<this.piece[0].length;t++){const i=[];for(let e=this.piece.length-1;e>=0;e--)i.push(this.piece[e][t]);e.push(i)}this.piece=e}moveDown(){this.position.y+=u}moveLeft(){this.position.x-=d}moveRigth(){this.position.x+=d}checkCollision(){}},t=class extends e{constructor(e){super(e),this.piece=[],this.piece.push([1,1,1,1])}},i=class extends e{constructor(e){super(e),this.piece=[],this.piece.push([0,1,0]),this.piece.push([1,1,1])}},n=class extends e{constructor(e){super(e),this.piece=[],this.piece.push([1,1]),this.piece.push([1,1])}},o=class extends e{constructor(e){super(e),this.piece=[],this.piece.push([1,0]),this.piece.push([1,1]),this.piece.push([0,1])}},s=class extends e{constructor(e){super(e),this.piece=[],this.piece.push([1,1]),this.piece.push([1,0]),this.piece.push([1,0])}},h=class extends e{constructor(e){super(e),this.piece=[],this.piece.push([0,1]),this.piece.push([1,1]),this.piece.push([1,0])}},c=class extends e{constructor(e){super(e),this.piece=[],this.piece.push([1,1]),this.piece.push([0,1]),this.piece.push([0,1])}},r={drawPexel(e,t,i,n,o=0){e.save(),e.translate(t+n/2,i+n/2),o&&(e.scale(o,o),e.rotate(.35*o)),e.shadowColor="white",e.shadowBlur=10*o,e.beginPath(),e.moveTo(-n/2,n/2),e.lineTo(n/2,n/2),e.lineTo(n/2,-n/2),e.lineTo(-n/2,-n/2),e.lineTo(-n/2,n/2),e.lineTo(n/2,-n/2),e.fill(),e.restore()},drawPexelsLine(e,t,i,n,o){for(let n=0;n<a;n++)this.drawPexel(e,t+n*d,i,d,o)},getPieceDataCopied(e){const t=new e.__proto__.constructor;return t.position={...e.position},t.piece=[...e.piece],t},getRandomPiece:e=>new([t,n,i,o,s,h,c][Math.floor(7*Math.random())])(e),createTouchDivAndAddToParent(e,t){let i=document.createElement("div");i.classList.add(e,"touch-cell"),t.appendChild(i)},isMobile(){const e=navigator.userAgent;return e.match(/Android/i)||e.match(/BlackBerry/i)||e.match(/iPhone|iPad|iPod/i)||e.match(/Opera Mini/i)||e.match(/IEMobile/i)}},a=10,l=16,d=32,u=32,w=r,p=class{constructor(e,t,i,n){setTimeout(function(){this.destroy()}.bind(this),500),this.frame=0,this.x=t,this.y=i,this.onDestroy=n,this.canvasContext=e}render(){this.frame+=.05,w.drawPexelsLine(this.canvasContext,this.x,this.y,d,this.frame)}destroy(){this.onDestroy()}},m=class{constructor(e){this.animations=[],this.canvasContext=e}createRemoveLineAnimation(e,t){this.animations.unshift(new p(this.canvasContext,e,t,this.destroyLineAnimation.bind(this)))}destroyLineAnimation(){this.animations.pop()}render(){this.animations.length&&this.animations.forEach((e=>{e.render()}))}};function v(e){for(let t=0;t<this.screenArray.length;t++)this.screenArray[t]=new Array(e).fill(0)}const y=class{constructor(e,t){this.canvasContext=e,this.screenArray=new Array(l),v.call(this,a),this.animationController=new m(this.canvasContext),this.onCompleteLine=t}getValue(e,t){return this.screenArray[e][t]}setValue(e,t,i){return this.screenArray[e][t]=i}render(){for(let e=0;e<this.screenArray.length;e++)if(!this.checkCompleteLine(e))for(let t=0;t<this.screenArray[e].length;t++)1===this.screenArray[e][t]&&w.drawPexel(this.canvasContext,t*d,e*d,d);this.animationController.render()}checkCompleteLine(e){let t=!1,i=0;for(;!t&&i<this.screenArray[e].length;)0===this.screenArray[e][i]?t=!0:i++;return!t}consolidatePiece(e){const t=e.piece,i=e.position.x/d,n=e.position.y/d;for(let e=0;e<t.length;e++)for(let o=0;o<t[e].length;o++)1===t[e][o]&&this.setValue(e+n,o+i,1)}removeCompleteLines(){for(let e=this.screenArray.length-1;e>=0;e--)this.checkCompleteLine(e)&&(this.animationController.createRemoveLineAnimation(0,e*d),this.onCompleteLine());setTimeout(function(){for(let e=this.screenArray.length-1;e>=0;e--)this.checkCompleteLine(e)&&(this.removeLine(e),clearInterval(this.timer),this.timer=setInterval(this.bindedMoveDown,this.speed),e++)}.bind(this),500)}removeLine(e){let t=e;for(;t>0;)this.screenArray[t]=this.screenArray[t-1],t--;this.screenArray[0]=new Array(a).fill(0)}},T=class{constructor(e,t,i,n){this.onMoveDown=n,this.onMoveLeft=e,this.onMoveRight=t,this.onMoveUp=i,window.keyDown=window.keyDown||{},document.onkeydown=function(e){e=e||window.event,window.keyDown[e.keyCode]=!0},document.onkeyup=function(e){e=e||window.event,window.keyDown[e.keyCode]=!1}}},g=window.innerWidth/3,f=window.innerHeight/3,A=class{constructor(){this.startTimeStamp=new Date,this.lastTouchMoveX=0,this.lastTouchMoveY=0,this.baseTouchMoveX=0,this.baseTouchMoveY=0,this.currentBaseTouch=null,window.keyDown=window.keyDown||{};const e=document.createElement("div");e.classList.add("touch-cell-container"),w.createTouchDivAndAddToParent("touch-leftTop",e),w.createTouchDivAndAddToParent("touch-top",e),w.createTouchDivAndAddToParent("touch-rightTop",e),w.createTouchDivAndAddToParent("touch-left",e),w.createTouchDivAndAddToParent("touch-center",e),w.createTouchDivAndAddToParent("touch-right",e),w.createTouchDivAndAddToParent("touch-leftBottom",e),w.createTouchDivAndAddToParent("touch-bottom",e),w.createTouchDivAndAddToParent("touch-rightBottom",e),window.document.body.appendChild(e)}cancelTouches(){window.keyDown[40]=!1,window.keyDown[38]=!1,window.keyDown[37]=!1,window.keyDown[39]=!1,window.keyDown[55]=!1,window.lastKeyCodeDown=0}touchStart(e){(new Date).getTime(),this.startTimeStamp.getTime(),this.startTimeStamp=new Date,e.preventDefault(),e.stopPropagation(),this.currentBaseTouch=e.targetTouches[e.targetTouches.length-1],this.lastTouchMoveX=e.targetTouches[0].pageX,this.lastTouchMoveY=e.targetTouches[0].pageY,this.baseTouchMoveX=e.targetTouches[0].pageX,this.baseTouchMoveY=e.targetTouches[0].pageY,this.lastTouchMoveY>=0&&this.lastTouchMoveY<f&&(window.keyDown[38]=!0),this.lastTouchMoveY>=2*f&&(window.keyDown[40]=!0),this.lastTouchMoveX>=0&&this.lastTouchMoveX<g&&(window.keyDown[37]=!0),this.lastTouchMoveX>=2*g&&(window.keyDown[39]=!0)}touchMove(e){}touchEnd(e){}initialise(){document.addEventListener("touchstart",this.touchStart.bind(this),{passive:!1}),document.addEventListener("touchmove",this.touchMove.bind(this),!1),document.addEventListener("touchend",this.touchEnd.bind(this),!1)}},P=class{constructor(e,t,i,n){this.onMoveDown=n,this.onMoveLeft=e,this.onMoveRight=t,this.onMoveUp=i,window.keyDown=window.keyDown||{},w.isMobile()?(this.inputController=new A,this.inputController.initialise(),window.scrollTo(0,1)):this.inputController=new T}checkKeys(){window.keyDown[40]&&(window.keyDown[40]=!1,this.onMoveDown()),window.keyDown[37]&&(window.keyDown[37]=!1,this.onMoveLeft()),window.keyDown[39]&&(window.keyDown[39]=!1,this.onMoveRight()),window.keyDown[38]&&(window.keyDown[38]=!1,this.onMoveUp())}};function D(e){const t=e.piece,i=e.position.x/d,n=e.position.y/d;let o=e.position.x+t[0].length*d>a*d||e.position.x<0||e.position.y+t.length*d>l*d||e.position.y<0;if(!o)for(let e=0;e<t.length;e++)for(let s=0;s<t[e].length;s++)1===t[e][s]&&1===this.screenArrayController.getValue(e+n,s+i)&&(o=!0);return o}function C(){this.points+=10,this.speed=Math.max(this.speed-100,5)}function x(){this.screenArrayController.consolidatePiece(this.currentPiece),this.screenArrayController.removeCompleteLines(),this.currentPiece=this.newPiece,this.currentPiece.position.x=0,this.newPiece=w.getRandomPiece(this.canvasContext),this.newPiece.position.x=a*d-2*d}function k(){const e=w.getPieceDataCopied(this.currentPiece);e.position.x-=d,D.call(this,e)||this.currentPiece.moveLeft()}function M(){const e=w.getPieceDataCopied(this.currentPiece);e.position.x+=d,D.call(this,e)||this.currentPiece.moveRigth()}function L(){const e=w.getPieceDataCopied(this.currentPiece);e.position.y+=d,D.call(this,e)?x.call(this):this.currentPiece.moveDown()}function b(){const e=w.getPieceDataCopied(this.currentPiece);if(e.rotateRigth(),D.call(this,e))for(this.currentPiece.rotateRigth();D.call(this,this.currentPiece);)this.currentPiece.moveLeft();else this.currentPiece.rotateRigth()}function R(){this.canvasContext.font="18px serif",this.canvasContext.fillText(this.points,d*a-40,16)}new class{constructor(e){this.canvas=e,this.canvasContext=this.canvas.getContext("2d"),this.canvas.width=a*d,this.canvas.height=l*d,this.screenArrayController=new y(this.canvasContext,C.bind(this)),this.bindedMain=this.main.bind(this),this.ioController=new P(k.bind(this),M.bind(this),b.bind(this),L.bind(this)),window.requestAnimationFrame=window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame,this.points=0,this.speed=2e3,this.deltaTime=0,this.lastTime=0,this.newPiece=w.getRandomPiece(this.canvasContext),this.newPiece.position.x=a*d-2*d,this.currentPiece=w.getRandomPiece(this.canvasContext),this.main()}main(e=0){this.deltaTime+=e-this.lastTime,this.lastTime=e,this.canvasContext.clearRect(0,0,this.canvas.width,this.canvas.height),this.ioController.checkKeys(),this.renderScreen()}renderScreen(){this.deltaTime>=this.speed&&(L.call(this),this.deltaTime=0),this.screenArrayController.render(),this.currentPiece.render(),this.newPiece.render(),R.call(this),window.requestAnimationFrame(this.bindedMain)}}(document.getElementById("mainCanvas"))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,